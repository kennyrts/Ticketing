Je suis en train de creer mon propre framework pour une application web (tomcat) sur java
Objectif : Creer differentes annotations pour la validation d'un formulaire
Exemple :
Imaginons que cette classe utilise mon framework, en mettant une annotation @Required username par exemple, FrontController throwera une exception si c'est null ou vide. Mettre plusieurs types de validations
package model;

import mg.itu.prom16.annotations.FormField;

public class User {
    @FormField(name = "username")
    private String username;
    
    @FormField(name = "email")
    private String email;
    
    @FormField(name = "age")
    private int age;

    // Getters and Setters
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}


Voila mon projet:

Controller.java
package mg.itu.prom16.annotations;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

// Définition de l'annotation
@Retention(RetentionPolicy.RUNTIME) // Annotation disponible au moment de l'exécution
@Target(ElementType.TYPE) // Annotation applicable aux types (classes, interfaces, etc.)
public @interface Controller {
    
}

FormField.java
package mg.itu.prom16.annotations;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
public @interface FormField {
    String name() default "";
}

FormObject.java
package mg.itu.prom16.annotations;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.PARAMETER)
public @interface FormObject {
}

Param.java
package mg.itu.prom16.annotations;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

// Définition de l'annotation
@Retention(RetentionPolicy.RUNTIME) // Annotation disponible au moment de l'exécution
@Target(ElementType.PARAMETER) // Annotation applicable aux paramètres de méthode
public @interface Param {
    String name();
}

ModelView.java
package mg.itu.prom16.util;

import java.util.HashMap;

public class ModelView {
    private String url;
    private HashMap<String, Object> data;

    // Constructeur par défaut
    public ModelView() {
        this.data = new HashMap<>();
    }

    // Constructeur avec l'URL
    public ModelView(String url) {
        this.url = url;
        this.data = new HashMap<>();
    }

    // Getter pour l'URL
    public String getUrl() {
        return url;
    }

    // Setter pour l'URL
    public void setUrl(String url) {
        this.url = url;
    }

    // Getter pour les données
    public HashMap<String, Object> getData() {
        return data;
    }

    // Setter pour les données
    public void setData(HashMap<String, Object> data) {
        this.data = data;
    }

    // Méthode pour ajouter une donnée
    public void addObject(String key, Object value) {
        this.data.put(key, value);
    }

    // Méthode pour obtenir une donnée
    public Object getObject(String key) {
        return this.data.get(key);
    }

    // Méthode pour supprimer une donnée
    public void removeObject(String key) {
        this.data.remove(key);
    }

    public static void main(String[] args) {
        // Exemple d'utilisation
        ModelView mv = new ModelView("http://example.com");
        mv.addObject("name", "John Doe");
        mv.addObject("age", 30);

        System.out.println("URL: " + mv.getUrl());
        System.out.println("Données: " + mv.getData());
    }
}

HttpStatusException.java
package mg.itu.prom16.util;

public class HttpStatusException extends Exception {
    private final int statusCode;

    public HttpStatusException(int statusCode, String message) {
        super(message);
        this.statusCode = statusCode;
    }

    public int getStatusCode() {
        return statusCode;
    }
}

package mg.itu.prom16.controller;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.HashMap;
import javax.servlet.*;
import javax.servlet.http.*;

import mg.itu.prom16.util.HttpStatusException;
import mg.itu.prom16.util.Mapping;
import mg.itu.prom16.util.ModelView;
import mg.itu.prom16.util.MySession;
import mg.itu.prom16.util.UploadedFile;
import mg.itu.prom16.annotations.FileUpload;
import mg.itu.prom16.annotations.FormField;
import mg.itu.prom16.annotations.FormObject;
import mg.itu.prom16.annotations.Get;
import mg.itu.prom16.annotations.Post;
import mg.itu.prom16.annotations.Param;
import mg.itu.prom16.annotations.Restapi;
import mg.itu.prom16.annotations.Url;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class FrontController extends HttpServlet {
    HashMap<String,Mapping> urlMapping = new HashMap<>();

    public void init() throws ServletException {
        ServletContext context = getServletContext();
        String dossier = context.getInitParameter("package");
        if (dossier == null || dossier.isEmpty()) {
            throw new ServletException("Le paramètre de package est vide ou non spécifié.");
        }
        String chemin = "WEB-INF/classes/"+dossier.replace('.', '/');
        String absoluteDossierPath = context.getRealPath(chemin);
        File folder = new File(absoluteDossierPath);
        if (!folder.exists() || !folder.isDirectory()) {
            throw new ServletException("Le package spécifié n'existe pas : " + dossier);
        }
        File[] files = folder.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.getName().endsWith(".class")) {
                    String className = dossier+"."+getClassName(file.getPath(), folder.getPath().length() + 1);
                    try {
                        Class<?> cls = Class.forName(className);
                        for (Annotation annotation : cls.getAnnotations()) {
                            if (annotation.annotationType().getSimpleName().equals("Controller")) {
                                    for (Method method : cls.getDeclaredMethods()) {
                                    // Vérifier si la méthode est annotée avec @Url
                                    if (method.isAnnotationPresent(Url.class)) {
                                        // Obtenir l'annotation                                        
                                        Url urlAnnotation = method.getAnnotation(Url.class);
                                        String url = urlAnnotation.value();
                                        if (urlMapping.containsKey(url)) {
                                            throw new ServletException("L'URL '" + url + "' est attachée à plusieurs fonctions.");
                                        }
                                        urlMapping.put(url, new Mapping(className, method.getName()));
                                    }
                                }
                            }
                        }    
                    } catch (Exception e) {
                        e.printStackTrace();
                        throw new ServletException("Erreur lors du traitement de la classe : " + className, e);
                    }                    
                }
            }
        }
        else {
            throw new ServletException("Le package spécifié est vide : " + dossier);
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            processRequest(request, response);    
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            processRequest(request, response);    
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
        try {
            // Obtenir l'URI complète
            String uri = request.getRequestURI();
        
            // Obtenir le contexte de l'application
            String contextPath = request.getContextPath();
            
            // Extraire la partie de l'URI après le contexte
            String relativeUri = uri.substring(contextPath.length() + 1);

            if (!urlMapping.containsKey(relativeUri)) {            
                throw new HttpStatusException(HttpServletResponse.SC_NOT_FOUND, "Aucun mapping trouvé pour l'URL : " + relativeUri);
            } else {
                Mapping mapping = urlMapping.get(relativeUri);
                // Charger la classe
                Class<?> clazz = Class.forName(mapping.getClassName());
                
                // Créer une instance de la classe
                Object instance = clazz.getDeclaredConstructor().newInstance();
                
                // Obtenir la méthode
                // Method method = clazz.getDeclaredMethod(mapping.getMethodName());
                Method method = null;
                for (Method fonction : clazz.getDeclaredMethods()) {
                    if (fonction.getName().equals(mapping.getMethodName())) {
                        method = fonction;
                    }
                }

                if (method == null) {
                    throw new HttpStatusException(HttpServletResponse.SC_NOT_FOUND, "Méthode non trouvée : " + mapping.getMethodName());
                }

                // Vérifier le type de requête HTTP et l'annotation de la méthode
                String httpMethod = request.getMethod();
                boolean isGet = method.isAnnotationPresent(Get.class);
                boolean isPost = method.isAnnotationPresent(Post.class);
                
                if (!isGet && !isPost) {
                    isGet = true; // Par défaut, considérer comme GET
                }

                if (httpMethod.equals("GET") && !isGet) {
                    throw new HttpStatusException(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "L'URL " + relativeUri + " n'accepte que POST, mais GET a été utilisé.");
                }

                if (httpMethod.equals("POST") && !isPost) {
                    throw new HttpStatusException(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "L'URL " + relativeUri + " n'accepte que GET, mais POST a été utilisé.");
                }

                Parameter[] parameters = method.getParameters();
                Object[] parameterValues = new Object[parameters.length];

                boolean isMultipart = request.getContentType() != null && request.getContentType().startsWith("multipart/form-data");

                for (int i = 0; i < parameters.length; i++) {
                    Parameter parameter = parameters[i];
                    if (parameter.getType().equals(MySession.class)) {                    
                        parameterValues[i] = new MySession(request.getSession());
                    } else if (parameter.isAnnotationPresent(Param.class)) {
                        Param paramAnnotation = parameter.getAnnotation(Param.class);
                        String paramName = paramAnnotation.name();
                        String paramValue = request.getParameter(paramName);
                        parameterValues[i] = paramValue;
                    } else if (parameter.isAnnotationPresent(FormObject.class)) {
                            Object formObject = parameter.getType().getDeclaredConstructor().newInstance();
                            for (Field field : formObject.getClass().getDeclaredFields()) {
                            String fieldName = field.getName();
                            if (field.isAnnotationPresent(FormField.class)) {
                                FormField formField = field.getAnnotation(FormField.class);
                                if (!formField.name().isEmpty()) {
                                    fieldName = formField.name();
                                }
                            }
                            String paramValue = request.getParameter(fieldName);
                            field.setAccessible(true);
                            field.set(formObject, convertToFieldType(field, paramValue));
                        }
                        parameterValues[i] = formObject;
                    } else if (parameter.getType().equals(UploadedFile.class)) {
                        if (isMultipart) {
                            // System.out.println("isMultipart");
                            if (parameter.isAnnotationPresent(FileUpload.class)) {
                                String paramName = parameter.getAnnotation(FileUpload.class).name();
                                // String paramName = "file";
                                // System.out.println("paramName : "+paramName);
                                Part filePart = request.getPart(paramName); // Récupération de la partie fichier                                                        
                    
                                if (filePart != null) {
                                    // System.out.println("filePart not null");
                                    String fileName = extractFileName(filePart);
                                    String contentType = filePart.getContentType();
                                    long size = filePart.getSize();
                                    InputStream inputStream = filePart.getInputStream();   
                                                                
                    
                                    // Création de l'objet UploadedFile
                                    parameterValues[i] = new UploadedFile(fileName, contentType, size, inputStream);
                                } else {
                                    // System.out.println("filePart null");
                                    parameterValues[i] = null; // Pas de fichier associé
                                }   
                            }                            
                        } else {
                            parameterValues[i] = null; // Pas une requête multipart
                        }
                    } else{                        
                        String paramName = parameter.getName();
                        String paramValue = request.getParameter(paramName);
                        parameterValues[i] = paramValue;
                    }
                }
                // Exécuter la méthode et obtenir le résultat
                Object result = method.invoke(instance,parameterValues);

                if (method.isAnnotationPresent(Restapi.class)) {
                    response.setContentType("application/json;charset=UTF-8");
                    if (result instanceof ModelView) {
                        // Si result est un ModelView, extraire les données et les convertir en JSON
                        ModelView mv = (ModelView) result;
                        HashMap<String, Object> data = mv.getData();
                        writeJsonResponse(response, data);
                    } else {
                        // Sinon, transformer directement result en JSON
                        writeJsonResponse(response, result);
                    }
                } else if (result instanceof String) {
                    // Si le résultat est une String, l'ajouter directement au message
                    response.getWriter().write((String) result);
                } else if (result instanceof ModelView) {
                    ModelView mv = (ModelView) result;
                    // Récupérer l'URL et dispatcher les données vers cet URL
                    String destinationUrl = mv.getUrl();
                    HashMap<String, Object> data = mv.getData();

                    for (String key : data.keySet()) {
                        request.setAttribute(key, data.get(key));
                    }

                    RequestDispatcher dispatcher = request.getRequestDispatcher(destinationUrl);
                    dispatcher.forward(request, response);                    
                } else {
                    throw new HttpStatusException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Type de retour non reconnu : " + result.getClass().getName());
                }
            }            
        } catch (HttpStatusException e) {
            handleError(response, e.getStatusCode(), e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            handleError(response, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
            e.printStackTrace();
        }   
    }

    private Object convertToFieldType(Field field, String paramValue) {
        Class<?> fieldType = field.getType();
        if (fieldType == int.class || fieldType == Integer.class) {
            return Integer.parseInt(paramValue);
        } else if (fieldType == long.class || fieldType == Long.class) {
            return Long.parseLong(paramValue);
        } else if (fieldType == float.class || fieldType == Float.class) {
            return Float.parseFloat(paramValue);
        } else if (fieldType == double.class || fieldType == Double.class) {
            return Double.parseDouble(paramValue);
        } else if (fieldType == boolean.class || fieldType == Boolean.class) {
            return Boolean.parseBoolean(paramValue);
        }
        return paramValue;
    }

    private void handleError(HttpServletResponse response, int statusCode, String message) throws IOException {
        response.setStatus(statusCode);
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Erreur</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<p>Erreur " + statusCode + " : " + message + "</p>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    private String getClassName(String filePath, int basePathLength) {
        String className = filePath.substring(basePathLength)
                .replace(File.separatorChar, '.')
                .replace(".class", "");
        return className;
    }

    private void writeJsonResponse(HttpServletResponse response, Object data) throws IOException {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try (PrintWriter writer = response.getWriter()) {
            writer.write(gson.toJson(data));
        }
    }
    
    private String extractFileName(Part part) {
        String contentDisposition = part.getHeader("content-disposition");
        for (String content : contentDisposition.split(";")) {
            if (content.trim().startsWith("filename")) {
                return content.substring(content.indexOf("=") + 2, content.length() - 1);
            }
        }
        return null;
    }
}